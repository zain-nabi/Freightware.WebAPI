//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vendor.Services.Edocs.Auth
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://virtualpostman.co.za/vp/webservices/Auth/v2/", ConfigurationName="Vendor.Services.Edocs.Auth.Auth")]
    public interface Auth
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.isSessionValidResponse> isSessionValidAsync(Vendor.Services.Edocs.Auth.isSessionValid request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.loginResponse> loginAsync(Vendor.Services.Edocs.Auth.login request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class isSessionValid
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="isSessionValid", Namespace="http://virtualpostman.co.za/vp/webservices/Auth/v2/", Order=0)]
        public Vendor.Services.Edocs.Auth.isSessionValidBody Body;
        
        public isSessionValid()
        {
        }
        
        public isSessionValid(Vendor.Services.Edocs.Auth.isSessionValidBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class isSessionValidBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string sessionId;
        
        public isSessionValidBody()
        {
        }
        
        public isSessionValidBody(string sessionId)
        {
            this.sessionId = sessionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class isSessionValidResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="isSessionValidResponse", Namespace="http://virtualpostman.co.za/vp/webservices/Auth/v2/", Order=0)]
        public Vendor.Services.Edocs.Auth.isSessionValidResponseBody Body;
        
        public isSessionValidResponse()
        {
        }
        
        public isSessionValidResponse(Vendor.Services.Edocs.Auth.isSessionValidResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class isSessionValidResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool sessionIsValid;
        
        public isSessionValidResponseBody()
        {
        }
        
        public isSessionValidResponseBody(bool sessionIsValid)
        {
            this.sessionIsValid = sessionIsValid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class login
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="login", Namespace="http://virtualpostman.co.za/vp/webservices/Auth/v2/", Order=0)]
        public Vendor.Services.Edocs.Auth.loginBody Body;
        
        public login()
        {
        }
        
        public login(Vendor.Services.Edocs.Auth.loginBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class loginBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string username;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string password;
        
        public loginBody()
        {
        }
        
        public loginBody(string username, string password)
        {
            this.username = username;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class loginResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="loginResponse", Namespace="http://virtualpostman.co.za/vp/webservices/Auth/v2/", Order=0)]
        public Vendor.Services.Edocs.Auth.loginResponseBody Body;
        
        public loginResponse()
        {
        }
        
        public loginResponse(Vendor.Services.Edocs.Auth.loginResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class loginResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string sessionId;
        
        public loginResponseBody()
        {
        }
        
        public loginResponseBody(string sessionId)
        {
            this.sessionId = sessionId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface AuthChannel : Vendor.Services.Edocs.Auth.Auth, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AuthClient : System.ServiceModel.ClientBase<Vendor.Services.Edocs.Auth.Auth>, Vendor.Services.Edocs.Auth.Auth
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthClient() : 
                base(AuthClient.GetDefaultBinding(), AuthClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.AuthPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthClient.GetBindingForEndpoint(endpointConfiguration), AuthClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.isSessionValidResponse> Vendor.Services.Edocs.Auth.Auth.isSessionValidAsync(Vendor.Services.Edocs.Auth.isSessionValid request)
        {
            return base.Channel.isSessionValidAsync(request);
        }
        
        public System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.isSessionValidResponse> isSessionValidAsync(string sessionId)
        {
            Vendor.Services.Edocs.Auth.isSessionValid inValue = new Vendor.Services.Edocs.Auth.isSessionValid();
            inValue.Body = new Vendor.Services.Edocs.Auth.isSessionValidBody();
            inValue.Body.sessionId = sessionId;
            return ((Vendor.Services.Edocs.Auth.Auth)(this)).isSessionValidAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.loginResponse> Vendor.Services.Edocs.Auth.Auth.loginAsync(Vendor.Services.Edocs.Auth.login request)
        {
            return base.Channel.loginAsync(request);
        }
        
        public System.Threading.Tasks.Task<Vendor.Services.Edocs.Auth.loginResponse> loginAsync(string username, string password)
        {
            Vendor.Services.Edocs.Auth.login inValue = new Vendor.Services.Edocs.Auth.login();
            inValue.Body = new Vendor.Services.Edocs.Auth.loginBody();
            inValue.Body.username = username;
            inValue.Body.password = password;
            return ((Vendor.Services.Edocs.Auth.Auth)(this)).loginAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthPort))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.50.12:8080/webservices/Auth/v2.0/Auth");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuthClient.GetBindingForEndpoint(EndpointConfiguration.AuthPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuthClient.GetEndpointAddress(EndpointConfiguration.AuthPort);
        }
        
        public enum EndpointConfiguration
        {
            
            AuthPort,
        }
    }
}
